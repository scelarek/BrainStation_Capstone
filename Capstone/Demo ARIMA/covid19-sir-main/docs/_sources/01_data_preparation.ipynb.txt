{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hNtWGMj80ftz"
      },
      "source": [
        "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lisphilar/covid19-sir/HEAD?labpath=example%2F01_data_preparation.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Data preparation\n",
        "The first step of data science is data preparation. `covsirphy` has the following three functionality for that.\n",
        "\n",
        "1. Downloading datasets from recommended data servers\n",
        "2. Reading `pandas.DataFrame`\n",
        "3. Generator of sample data with SIR-derived ODE model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "4xwq1Ez50ft0",
        "outputId": "93d5bc0e-07d5-4c5a-a278-fb53091e076c"
      },
      "outputs": [],
      "source": [
        "from datetime import date\n",
        "from pprint import pprint\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import covsirphy as cs\n",
        "cs.__version__"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "From version 2.28.0, some classes and methods output the following information using [loguru: library which aims to bring enjoyable logging in Python](https://github.com/Delgan/loguru). We can change logging level with `cs.config(level=2)` (as default).\n",
        "\n",
        "- `level=0`: errors (exceptions)\n",
        "- `level=1`: errors, warnings\n",
        "- `level=2`: errors, warnings, info (start downloading/optimization)\n",
        "- `level=3`: errors, warnings, info, debug"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "cs.config.logger(level=2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QH0AEUrT0ft1"
      },
      "source": [
        "## 1. Downloading datasets from recommended data \n",
        "We will download datasets from the following recommended data servers.\n",
        "\n",
        "* **[COVID-19 Data Hub](https://covid19datahub.io/)**\n",
        "    * Guidotti, E., Ardia, D., (2020), “COVID-19 Data Hub”, Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "    * The number of cases (JHU style)\n",
        "    * Population values in each country/province\n",
        "    * [Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)\n",
        "    * The number of tests\n",
        "* **[Our World In Data](https://github.com/owid/covid-19-data/tree/master/public/data)**\n",
        "    * Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "    * The number of tests\n",
        "    * The number of vaccinations\n",
        "    * The number of people who received vaccinations\n",
        "* **[COVID-19 Open Data by Google Cloud Platform](https://github.com/GoogleCloudPlatform/covid-19-open-data)**\n",
        "    * O. Wahltinez and others (2020), COVID-19 Open-Data: curating a fine-grained, global-scale data repository for SARS-CoV-2, Work in progress, https://goo.gle/covid-19-open-data\n",
        "    * percentage to baseline in visits\n",
        "    * Note: Please refer to [Google Terms of Service](https://policies.google.com/terms) in advance.\n",
        "    * **This will be removed because not updated. Refer to https://github.com/lisphilar/covid19-sir/issues/1224**\n",
        "* **[World Population Prospects 2022](https://population.un.org/wpp/)**\n",
        "    * United Nations, Department of Economic and Social Affairs, Population Division (2022). World Population Prospects 2022, Online Edition.\n",
        "    * Total population in each country\n",
        "* **[Datasets for CovsirPhy](https://github.com/lisphilar/covid19-sir/tree/master/data)**\n",
        "    * Hirokazu Takaya (2020-2022), GitHub repository, COVID-19 dataset in Japan, https://github.com/lisphilar/covid19-sir/tree/master/data\n",
        "    * The number of cases in Japan (total/prefectures)\n",
        "    * Metadata regarding Japan prefectures\n",
        "\n",
        "***\n",
        "\n",
        "How to request new data loader:  \n",
        "If you want to use a new dataset for your analysis, please kindly inform us using [GitHub Issues: Request new method of DataLoader class](https://github.com/lisphilar/covid19-sir/issues/new/?template=request-new-method-of-dataloader-class.md). Please read [Guideline of contribution](https://lisphilar.github.io/covid19-sir/CONTRIBUTING.html) in advance."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SxYNNSWF0ft1"
      },
      "source": [
        "### 1-1. With `DataEngineer` class\n",
        "We can use `DataEngineer().download()` for data downloading from recommended data servers as the quickest way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RG16Z6wJ0ft1",
        "outputId": "46bf0c3d-dfb1-4719-8fc0-b08838125938"
      },
      "outputs": [],
      "source": [
        "eng = cs.DataEngineer()\n",
        "eng.download(databases=[\"japan\", \"covid19dh\", \"owid\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "olESmSIm0ft2"
      },
      "source": [
        "We can get the all downloaded records as a `pandas.DataFrame` with `DataEngineer().all()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "veU-JhWE0ft3",
        "outputId": "9de3ae82-7c34-4865-c3a2-4725794c3018"
      },
      "outputs": [],
      "source": [
        "all_df = eng.all()\n",
        "# Overview of the records\n",
        "all_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rXI_-Szv0ft3"
      },
      "source": [
        "`DataEngineer.citations()` shows citations of the datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f4rON2YT0ft3",
        "outputId": "826d992b-8aad-446e-c667-feda2b68d507"
      },
      "outputs": [],
      "source": [
        "print(\"\\n\".join(eng.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Va72VKN0ft4"
      },
      "source": [
        "Note that, as default, `DataEngineer().download()` collects country-level data and save the datasets as CSV files in \"input\" (=`directory` argument of `DataEngineer().download()`) folder of the current directory. If the last modification time of the saved CSV files is within the last 12 (=`update_interval` argument of `DataEngineer().download()`) hours, the saved CSV files will be used as the database."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UQXWUfGV0ft4"
      },
      "source": [
        "For some countries (eg. Japan), province/state/prefecture level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "ZdJU3br70ft5",
        "outputId": "d8029f79-3f7c-4719-96a6-f23ec495a152"
      },
      "outputs": [],
      "source": [
        "eng_jpn = cs.DataEngineer()\n",
        "eng_jpn.download(country=\"Japan\", databases=[\"japan\", \"covid19dh\", \"owid\"])\n",
        "eng_jpn.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TOFKVnfc0ft5"
      },
      "source": [
        "For some countries (eg. USA), city-level data is available and we can download it as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "WpHe4r8Z0ft5",
        "outputId": "a28b00d0-b21d-4b05-d656-074cba58746e"
      },
      "outputs": [],
      "source": [
        "eng_alabama = cs.DataEngineer()\n",
        "eng_alabama.download(country=\"USA\", province=\"Alabama\", databases=[\"japan\", \"covid19dh\", \"owid\"])\n",
        "eng_alabama.all().head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Move forward to [Tutorial: Data engineering](https://lisphilar.github.io/covid19-sir/02_data_engineering.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XTYFC2gp0ft6"
      },
      "source": [
        "### 1-2. With `DataDownloader` class\n",
        "`DataEngineer` class is useful because it has data cleaning methods and so on (explained with [Tutorial: Data engineering](https://lisphilar.github.io/covid19-sir/02_data_engineering.html)), but we can use `DataDownloader` class for data downloading."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eU11PgvY0ft6"
      },
      "outputs": [],
      "source": [
        "dl = cs.DataDownloader()\n",
        "dl_df = dl.layer(country=None, province=None, databases=[\"japan\", \"covid19dh\", \"owid\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xWgMq6Cp0ft6",
        "outputId": "14aeb714-43aa-4c4a-beb8-ad336c3d07cc"
      },
      "outputs": [],
      "source": [
        "# Overview of the records\n",
        "dl_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "efzYaK0f4k39"
      },
      "source": [
        "Note that ISO3/Province/City columns have string data instead of categorical data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vqj_VfnR0ft6",
        "outputId": "4f0e7637-cd8f-4d29-9576-4c886c01f1f6"
      },
      "outputs": [],
      "source": [
        "# Citations\n",
        "print(\"\\n\".join(dl.citations()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Acknowledgement\n",
        "\n",
        "In Feb2020, CovsirPhy project started in [Kaggle platform](https://www.kaggle.com/) with [COVID-19 data with SIR model](https://www.kaggle.com/lisphilar/covid-19-data-with-sir-model) notebook by Hirokazu Takaya helped by Kagglers using the following datasets.\n",
        "\n",
        "- The number of cases (JHU) and linelist: [Novel Corona Virus 2019 Dataset by SRK](https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset)\n",
        "- Population in each country:  [covid19 global forecasting: locations population by Dmitry A. Grechka](https://www.kaggle.com/dgrechka/covid19-global-forecasting-locations-population)\n",
        "- The number of cases in Japan: [COVID-19 dataset in Japan by Lisphilar](https://www.kaggle.com/lisphilar/covid19-dataset-in-japan)\n",
        "\n",
        "The current version of `covsirphy` does not have interfaces to use the datasets in Kaggle because they are not updated at this time. However, we could not have done CovsirPhy project without their supports. Thank you!!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OT9RbzGV0ft7"
      },
      "source": [
        "## 2. Reading `pandas.DataFrame`\n",
        "We may need to use our own datasets for analysis because the dataset is not included in the recommended data servers. `DataEngineer().register()` registers new datasets of `pandas.DataFrame` format."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mKhWAUWn0ft7"
      },
      "source": [
        "### 2-1. Retrieve Monkeypox line list\n",
        "\n",
        "At first, we will prepare the new dataset as `pandas.DataFrame`. We will use [Global.health Monkeypox under CC BY 4.0 license](https://github.com/globaldothealth/monkeypox), line list data regarding Monkeypox 2022, just for demonstration."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "today = date.today()\n",
        "mp_cite = f\"Global.health Monkeypox (accessed on {today.strftime('%Y-%m-%d')}):\\n\" \\\n",
        "    \"Kraemer, Tegally, Pigott, Dasgupta, Sheldon, Wilkinson, Schultheiss, et al. \" \\\n",
        "    \"Tracking the 2022 Monkeypox Outbreak with Epidemiological Data in Real-Time. \" \\\n",
        "    \"The Lancet Infectious Diseases. https://doi.org/10.1016/S1473-3099(22)00359-0.\\n\" \\\n",
        "    \"European Centre for Disease Prevention and Control/WHO Regional Office for Europe.\" \\\n",
        "    f\" Monkeypox, Joint Epidemiological overview, {today.day} {today.month}, 2022\"\n",
        "print(mp_cite)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Retrieve CSV file with `pandas.read_csv()`, using [Pyarrow](https://arrow.apache.org/docs/python/index.html) as the engine."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Deprecated: Final line list from Global.health, as of 2022-09-22\n",
        "raw_url = \"https://raw.githubusercontent.com/globaldothealth/monkeypox/9035dfb1303c05c380f86a3c1e00f81a1cc4046b/latest_deprecated.csv\"\n",
        "raw = pd.read_csv(raw_url, engine=\"pyarrow\")\n",
        "raw.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Review the data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "raw.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "pprint(raw.Status.unique())\n",
        "pprint(raw.Outcome.unique())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2-2. Convert line list to the number of cases data\n",
        "Prepare analyzable data, converting the line list to the number of cases. This step may be skipped because we have datasets with the number of cases."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Prepare PPT (per protocol set) data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "date_cols = [\n",
        "    \"Date_onset\", \"Date_confirmation\", \"Date_hospitalisation\",\n",
        "    \"Date_isolation\", \"Date_death\", \"Date_last_modified\"\n",
        "]\n",
        "cols = [\"ID\", \"Status\", \"City\", \"Country_ISO3\", \"Outcome\", *date_cols]\n",
        "df = raw.loc[:, cols].rename(columns={\"Country_ISO3\": \"ISO3\"})\n",
        "df = df.loc[df[\"Status\"].isin([\"confirmed\", \"suspected\"])]\n",
        "\n",
        "for col in date_cols:\n",
        "    df[col] = pd.to_datetime(df[col])\n",
        "\n",
        "df[\"Date_min\"] = df[date_cols].min(axis=1)\n",
        "df[\"Date_recovered\"] = df[[\"Outcome\", \"Date_last_modified\"]].apply(\n",
        "    lambda x: x[1] if x[0] == \"Recovered\" else pd.NaT, axis=1)\n",
        "df[\"City\"] = df[\"City\"].replace('', pd.NA).fillna(\"Unknown\")\n",
        "\n",
        "ppt_df = df.copy()\n",
        "ppt_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Calculate daily new confirmed cases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df = ppt_df.rename(columns={\"Date_min\": \"Date\"})\n",
        "series = df.groupby([\"ISO3\", \"City\", \"Date\"])[\"ID\"].count()\n",
        "series.name = \"Confirmed\"\n",
        "c_df = pd.DataFrame(series)\n",
        "c_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Calculate daily new recovered cases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df = ppt_df.rename(columns={\"Date_recovered\": \"Date\"})\n",
        "series = df.groupby([\"ISO3\", \"City\", \"Date\"])[\"ID\"].count()\n",
        "series.name = \"Recovered\"\n",
        "r_df = pd.DataFrame(series)\n",
        "r_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Calculate daily new fatal cases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df = ppt_df.rename(columns={\"Date_death\": \"Date\"})\n",
        "series = df.groupby([\"ISO3\", \"City\", \"Date\"])[\"ID\"].count()\n",
        "series.name = \"Fatal\"\n",
        "f_df = pd.DataFrame(series)\n",
        "f_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Combine data (cumulative number)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df = c_df.combine_first(f_df).combine_first(r_df)\n",
        "df = df.unstack(level=[\"ISO3\", \"City\"])\n",
        "df = df.asfreq(\"D\").fillna(0).cumsum()\n",
        "df = df.stack(level=[\"ISO3\", \"City\"]).reorder_levels([\"ISO3\", \"City\", \"Date\"])\n",
        "df = df.sort_index().reset_index()\n",
        "all_df_city = df.copy()\n",
        "all_df_city.head()"
      ]
    },
    {
      "attachments": {},
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "At country level (City = \"-\") and city level (City != \"-\"):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "df2 = all_df_city.groupby([\"ISO3\", \"Date\"], as_index=False).sum()\n",
        "df2[\"City\"] = \"-\"\n",
        "df = pd.concat([df2, all_df_city], axis=0)\n",
        "df = df.loc[df[\"City\"] != \"Unknown\"]\n",
        "all_df = df.convert_dtypes()\n",
        "all_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Check data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "gis = cs.GIS(layers=[\"ISO3\", \"City\"], country=\"ISO3\", date=\"Date\")\n",
        "gis.register(data=all_df, convert_iso3=False);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "variable = \"Confirmed\"\n",
        "gis.choropleth(\n",
        "    variable=variable, filename=None,\n",
        "    title=f\"Choropleth map (the number of {variable} cases)\"\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "global_df = gis.subset(geo=None).set_index(\"Date\").astype(np.int64)\n",
        "global_df.tail()\n",
        "cs.line_plot(global_df, title=\"The number of cases (Global)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2-3. Retrieve total population data\n",
        "So that we can analyze the data, total population values are necessary (we will confirm this with [Tutorial: SIR-derived ODE models](https://lisphilar.github.io/covid19-sir/03_ode.html) later).\n",
        "\n",
        "Population data at **country-level** can be retrieved with `DataDownloader().layer(databases=[\"wpp\"])` via `DataEngineer().register(databases=[\"wpp\"])`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Set layers and specify layer name of country\n",
        "# (which will be converted to ISO3 code for standardization)\n",
        "eng = cs.DataEngineer(layers=[\"ISO3\", \"City\"], country=[\"ISO3\"])\n",
        "# Download and automated registration of population data\n",
        "eng.download(databases=[\"wpp\"])\n",
        "# Specify date range to reduce the memory\n",
        "date_range = (all_df[\"Date\"].min(), all_df[\"Date\"].max())\n",
        "eng.clean(kinds=[\"resample\"], date_range=date_range)\n",
        "# Show all data\n",
        "display(eng.all())\n",
        "# Show citations\n",
        "pprint(eng.citations())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 2-4. Register Monkeypox data\n",
        "Register the Monkeypox data to `DataEngineer()` instance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "eng.register(data=all_df, citations=[mp_cite])\n",
        "# Show all data\n",
        "display(eng.all())\n",
        "# Show citations\n",
        "pprint(eng.citations())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Move forward to [Tutorial: Data engineering](https://lisphilar.github.io/covid19-sir/02_data_engineering.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jaOBElU50ft8"
      },
      "source": [
        "## 3. Generator of sample data with SIR-derived ODE model\n",
        "CovsirPhy can generate sample data with subclasses of `ODEModel` and `Dynamics` class. Refer to the followings."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ak6-zmPJ_0fO"
      },
      "source": [
        "### 3.1 Sample data of one-phase ODE model\n",
        "Regarding ODE models, please refer to [Tutorial: SIR-derived ODE models](https://lisphilar.github.io/covid19-sir/03_ode.html). Here, we will create a sample data with one-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022. ODE parameter values are preset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PXwvK4Dg_zgh",
        "outputId": "a6e82877-289b-4c65-b563-c2604ce2c865"
      },
      "outputs": [],
      "source": [
        "# Create solver with preset\n",
        "model = cs.SIRModel.from_sample(date_range=(\"01Jan2022\", \"30Jun2022\"), tau=1440)\n",
        "# Show settings\n",
        "pprint(model.settings())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3yr3a0YCWQw"
      },
      "source": [
        "Solve the ODE model with `ODEModel().solve()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "GHtEMTivCUIB",
        "outputId": "00d517b2-1d30-413b-de1a-e207e4f3f46b"
      },
      "outputs": [],
      "source": [
        "one_df = model.solve()\n",
        "display(one_df.head())\n",
        "display(one_df.tail())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u3LM2rYNCwKq"
      },
      "source": [
        "Plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "wfF9YVpjBrwx",
        "outputId": "5a3ce53d-2f4d-4aaf-b1c5-da2b4419d2f3"
      },
      "outputs": [],
      "source": [
        "cs.line_plot(one_df, title=f\"Sample data of SIR model {model.settings()['param_dict']}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aJPXHdO6DlvP"
      },
      "source": [
        "### 3.2 Sample data of multi-phase ODE model\n",
        "Regarding multi-phase ODE models, please refer to [Phase-dependent SIR models](https://lisphilar.github.io/covid19-sir/04_phase_dependent.html). Here, we will create a sample data with two-phase SIR model and tau value 1440 min, the first date 01Jan2022, the last date 30Jun2022.\n",
        "\n",
        "The 0th phase: 01Jan2022 - 28Feb2022, rho=0.2, sigma=0.075 (preset)  \n",
        "The 1st phase: 01Mar2022 - 30Jun2022, **rho=0.4**, sigma=0.075\n",
        "\n",
        "We will use `Dynamics` class. At first, set the first/date of dynamics and set th 0th phase ODE parameters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "xfg1w4MHDQbY",
        "outputId": "553461c8-e17f-406a-94fd-9cbc8ebd4e19"
      },
      "outputs": [],
      "source": [
        "dyn = cs.Dynamics.from_sample(model=cs.SIRModel, date_range=(\"01Jan2022\", \"30Jun2022\"))\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c3yq1XhyFYm4"
      },
      "source": [
        "Add the 1st phase with `Dynamics.register()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "52F-E4RsFFMt",
        "outputId": "31dfb44e-7ca1-444c-c037-67e3f1904c11"
      },
      "outputs": [],
      "source": [
        "setting_df = dyn.register()\n",
        "setting_df.loc[\"01Mar2022\": \"30Jun2022\", [\"rho\", \"sigma\"]] = [0.4, 0.075]\n",
        "setting_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "kHRTBCp9GAn5",
        "outputId": "e42ed1d6-1e2e-48b5-de76-73bdc976d8ba"
      },
      "outputs": [],
      "source": [
        "dyn.register(data=setting_df)\n",
        "# Show summary\n",
        "dyn.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIatMUQlGgfv"
      },
      "source": [
        "Solve the ODE model with `Dynamics().simulate()` method and plot the time-series data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "li4MlC0GGeiT",
        "outputId": "f83354fa-c3ef-42df-ce98-caa8fc6c1dea"
      },
      "outputs": [],
      "source": [
        "two_df = dyn.simulate(model_specific=True)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULqVx3R5H268"
      },
      "source": [
        "When we need convert model-specific variables to model-free variables (Susceptible/Infected/Fatal/Recovered), we will set `model_specific=False` (default).\n",
        "Because R=\"Fatal or Recovered\" in SIR model, we assume that R=\"Recovered\" and F = 0."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "S5uM-kdCHLaD",
        "outputId": "9f6524d4-9e62-496b-ba7b-59351836cb15"
      },
      "outputs": [],
      "source": [
        "two_df = dyn.simulate(model_specific=False)\n",
        "cs.line_plot(two_df, title=\"Sample data of two-phase SIR model with SIRF variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q63KLP93Is-e"
      },
      "source": [
        "Actually, observable variables are Population/Confirmed/Infected/Recovered. We can calculate Population and Confirmed as follows.\n",
        "\n",
        "- Confirmed = Infected + Fatal + Recovered\n",
        "- Population = Susceptible + Confirmed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "Ta-PK8bbJB47",
        "outputId": "6862b434-d2ea-4bc6-ab87-863f50b65f6f"
      },
      "outputs": [],
      "source": [
        "real_df = two_df.copy()\n",
        "real_df[\"Confirmed\"] = real_df[[\"Infected\", \"Fatal\", \"Recovered\"]].sum(axis=1)\n",
        "real_df[\"Population\"] = real_df[[\"Susceptible\", \"Confirmed\"]].sum(axis=1)\n",
        "real_df = real_df.loc[:, [\"Population\", \"Confirmed\", \"Recovered\", \"Fatal\"]]\n",
        "cs.line_plot(real_df, title=\"Sample data of two-phase SIR model with observable variables\", v=[\"01Mar2022\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pK7Pi3MLKtLa"
      },
      "source": [
        "Thank you!"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "include_colab_link": true,
      "name": "01_data_preparation.ipynb",
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3.9.8 ('.venv': poetry)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.7"
    },
    "orig_nbformat": 4,
    "vscode": {
      "interpreter": {
        "hash": "22bb74880181aee4909a67ef083e714bf83db977b91038d43aef8b1870a4f681"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
